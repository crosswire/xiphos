dnl Process this file with autoconf to produce a configure script.
 
AC_INIT(configure.in)
AM_INIT_AUTOMAKE(gnomesword-1.0, 0.9.devel)
AM_CONFIG_HEADER(config.h)

dnl 
dnl code from Evolution configure.in
dnl
AC_DEFUN(GS_CHECK_LIB, [
	dispname="$1"
	pkgname="$2"
	minvers="$3"
	maxvers="$4"

	AC_MSG_CHECKING(for $dispname)

	if gnome-config --libs $pkgname > /dev/null 2>&1; then
		pkgvers=`gnome-config --modversion $pkgname | sed -e 's/^[[^0-9]]*//'`
	else
		pkgvers=not
	fi
	AC_MSG_RESULT($pkgvers found)

	pkgvers=`echo $pkgvers | awk -F. '{ print $[]1 * 1000000 + $[]2 * 10000 + $[]3 * 100 + $[]4;}'`
	cmpminvers=`echo $minvers | awk -F. '{ print $[]1 * 1000000 + $[]2 * 10000 + $[]3 * 100 + $[]4;}'`
	cmpmaxvers=`echo $maxvers | awk -F. '{ print $[]1 * 1000000 + $[]2 * 10000 + $[]3 * 100 + $[]4;}'`
	ok=yes
	if test "$pkgvers" -lt $cmpminvers; then
		ok=no
	elif test -n "$maxvers"; then
		if test "$pkgvers" -gt $cmpmaxvers; then
			ok=no
		elif test "$maxvers" != "$minvers" -a "$cmpmaxvers" -eq "$pkgvers"; then
			ok=no
		fi
	fi
	if test $ok = no; then
		case $maxvers in
		"")
			dispvers="$minvers or higher"
			;;
		$minvers)
			dispvers="$minvers (exactly)"
			;;
		*)
			dispvers="$minvers or higher, but less than $maxvers,"
			;;
		esac

		AC_MSG_ERROR([
""
"You need $dispname $dispvers to build GnomeSword"
"If you think you already have this installed, consult the README."])
	fi
])

AC_PROG_CC

dnl Initialize xml-i18n-tools
dnl AM_PROG_XML_I18N_TOOLS 


dnl check for libtool
AM_PROG_LIBTOOL

dnl Pick up the Gnome macros.
AM_ACLOCAL_INCLUDE(macros)

GNOME_INIT
AC_ISC_POSIX
AC_HEADER_STDC
AC_HAVE_HEADERS(stdlib.h unistd.h string.h errno.h stdio.h sys/stat.h ctype.h getopt.h math.h time.h sys/types.h fcntl.h netdb.h netinet/in.h sys/socket.h arpa/inet.h dirent.h sys/select.h sys/time.h sys/ipc.h)


dnl Languages which your application supports
ALL_LINGUAS="de es es_ES fr sk"
AM_GNOME_GETTEXT

dnl Set PACKAGE_*_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale")
  AC_DEFINE_UNQUOTED(PACKAGE_PIXMAPS_DIR, "${ac_default_prefix}/${DATADIRNAME}/pixmaps/${PACKAGE}")
  AC_DEFINE_UNQUOTED(PACKAGE_HELP_DIR, "${ac_default_prefix}/${DATADIRNAME}/gnome/help/${PACKAGE}")
  AC_DEFINE_UNQUOTED(PACKAGE_MENU_DIR, "${ac_default_prefix}/${DATADIRNAME}/gnome/apps")
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/${DATADIRNAME}/${PACKAGE}")
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale")
  AC_DEFINE_UNQUOTED(PACKAGE_PIXMAPS_DIR, "${prefix}/${DATADIRNAME}/pixmaps/${PACKAGE}")
  AC_DEFINE_UNQUOTED(PACKAGE_HELP_DIR, "${prefix}/${DATADIRNAME}/gnome/help/${PACKAGE}")
  AC_DEFINE_UNQUOTED(PACKAGE_MENU_DIR, "${prefix}/${DATADIRNAME}/gnome/apps")
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/${DATADIRNAME}/${PACKAGE}")
fi

GNOME_COMPILE_WARNINGS
GNOME_X_CHECKS

GS_CHECK_LIB(gdk-pixbuf with GNOME canvas support, gnomecanvaspixbuf, 0.11.0)
GS_CHECK_LIB(GAL, gal, 0.18.0.0)
GS_CHECK_LIB(GtkHTML, gtkhtml, 0.16.0)
GS_CHECK_LIB(GnomePrint, print, 0.29.0.0)

dnl Checks select argument types
AC_FUNC_SELECT_ARGTYPES
AC_HEADER_TIME

AC_PROG_CXX
AC_LANG_CPLUSPLUS

dnl ------------------------------------------------------------------------
dnl Find a file (or one of more files in a list of dirs)
dnl ------------------------------------------------------------------------
dnl
AC_DEFUN(AC_FIND_FILE,
[
$3=NO
for i in $2; do
  for j in $1; do
    if test -r "$i/$j"; then
      $3=$i
      break 2
    fi
  done
done
])


dnl looking for general SWORD path 
 
AC_ARG_WITH(sworddir, 
[  --with-sworddir=DIR     path where swordlib is installed (default=/usr/local/sword) ], 
[ 
  ac_sword_dir=$withval 
], ac_sword_dir=/usr/local/sword 
) 
 
dnl looking for sword includes 
AC_MSG_CHECKING([for sword headers]) 
sword_incdirs="${prefix}/include $ac_sword_dir/include $ac_sword_dir/include/sword /usr/include/sword /usr/include /usr/local/include /usr/local/sword/include /usr/local/include/sword /opt/sword/include /usr/sword/include/sword  /usr/local/sword/include/sword /opt/sword/include/sword" 
AC_FIND_FILE(swmgr.h, $sword_incdirs, sword_incdir) 
 
AC_MSG_RESULT([$sword_incdir]) 
 
dnl looking for sword library 
AC_MSG_CHECKING([for sword library]) 
sword_libdirs="${prefix}/lib $ac_sword_dir/lib /usr/lib /usr/sword/lib /usr/local/lib /usr/local/sword/lib /usr/lib/sword/lib /usr/local/share/sword/lib /opt/sword/lib" 
sword_file="libsword.so"
AC_FIND_FILE($sword_file, $sword_libdirs, sword_libdir) 
if test -r $sword_libdir/$sword_file; then 
  HAVE_SWORD_LIB=yes 
  SWORD_LIB_TYPE="shared" 
elif test ! -r $sword_libdir/$sword_file; then 
  HAVE_SWORD_LIB=no 
fi 
 
if test $HAVE_SWORD_LIB = no; then 
  sword_file="libsword.a"
  AC_FIND_FILE($sword_file, $sword_libdirs, sword_libdir) 
  if test -r $sword_libdir/$sword_file; then 
   HAVE_SWORD_LIB=yes 
   SWORD_LIB_TYPE="static" 
 fi 
fi 
 
if test $HAVE_SWORD_LIB = no; then 
 AC_MSG_ERROR(SWORD library not found.Try to use configure with --with-sworddir=/your/sword/prefix) 
fi 
 
SWORD_CPPFLAGS="'-I$sword_incdir' -g" 
SWORD_LIBS="-L$sword_libdir -lsword -lz" 
 
AC_SUBST(SWORD_CPPFLAGS) 
AC_SUBST(SWORD_LIBS) 
 
AC_MSG_RESULT([$SWORD_LIB_TYPE $sword_libdir]) 


dnl ******************************
dnl spell checking
dnl ******************************
AC_ARG_ENABLE(use_ispell,[--enable-use_ispell enable use_ispell],use_ispell=$enableval,use_ispell="no") 
AC_ARG_ENABLE(use_aspell,[--enable-use_aspell enable use_aspell],use_aspell=$enableval,use_aspell="no") 

PSPELL_LIBS=""
AC_SUBST(PSPELL_LIBS)
have_speller="no"
speller="none"
if test "x$use_ispell" = xyes; then
   dnl looking for ispell 
   
   AC_MSG_CHECKING([for ispell]) 
   ispell_dirs="${prefix}/bin $ac_ispell_dir/bin /usr/bin /usr/local/bin /opt/bin" 
   AC_FIND_FILE(ispell, $ispell_dirs, ispell_dir) 
   if test -r $ispell_dir/ispell; then 
      HAVE_ISPELL=yes 
      AC_DEFINE(USE_ISPELL, 1, [Define if you want to use ispell])
      AC_DEFINE(USE_SPELL, 1, [Define if you want to spell checking])
      echo "found"
      have_speller="yes"
      speller="ispell"
   fi   
fi  
if test "x$use_aspell" = xyes; then
   dnl looking for aspell 
   
   AC_MSG_CHECKING([for aspell]) 
   aspell_dirs="${prefix}/bin $ac_aspell_dir/bin /usr/bin /usr/local/bin /opt/bin" 
   AC_FIND_FILE(aspell, $aspell_dirs, aspell_dir) 
   if test -r $aspell_dir/aspell; then 
      HAVE_ASPELL=yes 
      AC_DEFINE(USE_ASPELL, 1, [Define if you want to use aspell])
      AC_DEFINE(USE_SPELL, 1, [Define if you want to spell checking])
      echo "found"
      have_speller="yes"
      speller="aspell"
   fi    
fi
if test "x$have_speller" = xno; then
   dnl looking for pspell 
   
   AC_MSG_CHECKING([for pspell]) 
   pspell_dirs="${prefix}/bin $ac_pspell_dir/bin /usr/bin /usr/local/bin /opt/bin" 
   AC_FIND_FILE(pspell-config, $pspell_dirs, pspell_dir) 

   if test -r $pspell_dir/pspell-config; then 
       HAVE_PSPELL=yes 
       have_speller="yes"
       speller="pspell"
       AC_DEFINE(USE_PSPELL, 1, [Define if you want to use pspell])
       AC_DEFINE(USE_SPELL, 1, [Define if you want to spell checking])
       PSPELL_LIBS="-L$pspell_dir -lpspell -lltdl"
       AC_SUBST(PSPELL_LIBS) 
      echo "found"
   fi
fi


dnl ******************************
dnl GdkPixbuf
dnl ******************************
PIXBUF_LIBS=`gnome-config --libs gdk_pixbuf gnomecanvaspixbuf`
PIXBUF_CFLAGS=`gnome-config --cflags gdk_pixbuf gnomecanvaspixbuf `
AC_SUBST(PIXBUF_LIBS)
AC_SUBST(PIXBUF_CFLAGS)
have_pixbuf="yes"

dnl ******************************
dnl GnomePrint 
dnl ******************************
GNOME_PRINT_LIBS=`gnome-config --libs print`
GNOME_PRINT_CFLAGS=`gnome-config --cflags print`
AC_SUBST(GNOME_PRINT_LIBS)
AC_SUBST(GNOME_PRINT_CFLAGS)
have_gnomeprint="yes"

dnl ******************************
dnl GtkHTML
dnl ******************************
GTKHTML_CFLAGS="`gnome-config --cflags gtkhtml`"
GTKHTML_LIBS="`gnome-config --libs gtkhtml`"
AC_SUBST(GTKHTML_CFLAGS)
AC_SUBST(GTKHTML_LIBS)

dnl ******************************
dnl Gnome App Lib 
dnl ******************************
GNOME_APP_LIBS=`gnome-config --libs gal`
GNOME_APP_CFLAGS=`gnome-config --cflags gal`
AC_SUBST(GNOME_APP_LIBS)
AC_SUBST(GNOME_APP_CFLAGS)
  
EXTRA_GNOME_LIBS="`gnome-config --libs ` $THREADS_LIBS `unicode-config --libs`"
EXTRA_GNOME_CFLAGS="`gnome-config --cflags ` $THREADS_CFLAGS `unicode-config --cflags`"

AC_SUBST(EXTRA_GNOME_LIBS)
AC_SUBST(EXTRA_GNOME_CFLAGS)

LIBS="$LIBS -L/usr/local/lib -L/usr/lib `xml-config --libs`"

dnl Only use -Wall if we have gcc
if test "x$GCC" = "xyes"; then
  if test -z "`echo "$CFLAGS" | grep "\-Wall" 2> /dev/null`" ; then
    CFLAGS="$CFLAGS -Wall"
  fi
fi


AC_OUTPUT([
Makefile
intl/Makefile
po/Makefile.in
doc/Makefile
doc/help/Makefile
macros/Makefile
src/Makefile
src/backend/Makefile
src/gnome/Makefile
src/main/Makefile
])


echo
echo "Summary of GnomeSword1 configuration:"
echo

if test "x$have_speller" = xyes; then
        echo "Spellchecking:                enabled"
	echo "using:                            $speller"
else
        echo "Spellchecking:                disabled"
fi

echo "install directory:              ${prefix}/bin"
echo "Sword lib type:               $SWORD_LIB_TYPE"
echo "path to swordlibs:            $sword_libdir"
