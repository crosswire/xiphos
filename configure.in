
AC_INIT(gnomesword, 2.1.dev1, http://sourceforge.net/tracker/?group_id=5528&atid=105528)
AC_CONFIG_SRCDIR(src/gnome2/gnomesword.c)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)

dnl AC_INIT(configure.in)
dnl AM_INIT_AUTOMAKE(gnomesword2, 0.9.dev18)
AM_CONFIG_HEADER(config.h)

AC_PROG_MAKE_SET

AC_ARG_ENABLE(gnome2,[  --enable-gnome1          build for gnome1],gnome1=$enableval,gnome1="no") 

if test "x$gnome1" = xno; then
	AC_DEFINE(USE_GNOME2, 1, [Define if you want to use Gnome2])
	DIRS="backend main gnome2"
	AC_SUBST(DIRS)
	gnomesword_exec="gnomesword2"
	AC_SUBST(gnomesword_exec)	
	PKG_CHECK_MODULES(GNOME, libgnomeui-2.0 gtk+-2.0 libgtkhtml-3.0 gal-2.0 libxml-2.0 sword,,exit)
else		
 	DIRS="backend main gnome"
 	AC_SUBST(DIRS)
 	gnomesword_exec="gnomesword-1.0"
 	AC_SUBST(gnomesword_exec)
 	PKG_CHECK_MODULES(GNOME, gtkhtml-1.1 gal libxml sword,,exit)
fi
AC_SUBST(GNOME_LIBS)
AC_SUBST(GNOME_CFLAGS)


dnl Checks select argument types
AC_FUNC_SELECT_ARGTYPES
AC_HEADER_TIME

AC_PROG_INTLTOOL([0.23])

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AM_PROG_LIBTOOL

AC_PROG_CXX
AC_LANG_CPLUSPLUS


dnl ================================================================
dnl Gettext stuff.
dnl ================================================================
GETTEXT_PACKAGE=gnomesword
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
dnl Languages which your application supports
if test "x$gnome1" = xno; then
	ALL_LINGUAS="en_GB fr_FR ru_RU uk_UK"
else
	ALL_LINGUAS="bg de de_DE es es_ES fr ru sk"
fi
AM_GLIB_GNU_GETTEXT



AC_ARG_ENABLE(debug,[  --enable-debug          build debug library [default=no]],,enable_debug=no)
CXXFLAGS="$CXXFLAGS -ftemplate-depth-25"

if test x$enable_debug = xyes; then
  if test x$ac_cv_prog_cc_g = xyes; then
    CFLAGS="-g3 -O0"
  else
    CFLAGS="-O0"
  fi
  if test x$ac_cv_prog_cxx_g = xyes; then
    CXXFLAGS="-g3 -O0"
  else
    CXXFLAGS="-O0"
  fi
  CFLAGS="$CFLAGS -Werror"
  CXXFLAGS="$CXXFLAGS -Werror"
fi


GNOME_SPELL_CFLAGS=""
GNOME_SPELL_LIBS=""
AC_SUBST(GNOME_SPELL_CFLAGS)
AC_SUBST(GNOME_SPELL_LIBS)
have_speller="no"
use_gnome_spell="false"
AC_ARG_ENABLE(pspell,[  --enable-pspell enable pspell],pspell=$enableval,pspell="no") 

if test "x$pspell" = xno; then
  GNOME_SPELL_MODULES="libgnomeui-2.0 >= 1.112.1 libbonoboui-2.0 >= 1.112.1 libglade-2.0 >= 1.99.9"
  PKG_CHECK_MODULES(GNOME_SPELL, $GNOME_SPELL_MODULES)
  AC_SUBST(GNOME_SPELL_CFLAGS)
  AC_SUBST(GNOME_SPELL_LIBS)
  have_speller="yes"
  speller="gnome-spell"
  use_gnome_spell="true"
  AC_DEFINE(USE_GNOME_SPELL, 1, [Define if you want to use gnome-spell])
  AC_DEFINE(USE_SPELL, 1, [Define if you want to spell checking])
  ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
  AC_SUBST(ORBIT_IDL)

  BONOBO_IDL_INCLUDES="-I`$PKG_CONFIG --variable=idldir libbonobo-2.0` -I`$PKG_CONFIG --variable=idldir bonobo-activation-2.0`"
  AC_SUBST(BONOBO_IDL_INCLUDES)
fi

AM_CONDITIONAL(GNOME_SPELL, test x$use_gnome_spell = xtrue)

SPELL_LIBS=""
AC_SUBST(SPELL_LIBS)

if test "x$pspell" = xyes; then
  AC_MSG_CHECKING([for pspell]) 
  pspell_dirs="${prefix}/bin $ac_pspell_dir/bin /usr/bin /usr/local/bin /opt/bin" 
  AC_FIND_FILE(pspell-compat-config, $pspell_dirs, pspell_dir) 

  if test -r $pspell_dir/pspell-compat-config; then 
    HAVE_PSPELL=yes 
    have_speller="yes"
    speller="pspell"
    AC_DEFINE(USE_PSPELL, 1, [Define if you want to use pspell])
    AC_DEFINE(USE_SPELL, 1, [Define if you want to spell checking])
    SPELL_LIBS="-L$pspell_dir -lpspell-compat -laspell-compat -lltdl"
    AC_SUBST(SPELL_LIBS) 
    echo "found pspell-compat-config"
  else
    AC_FIND_FILE(pspell-config, $pspell_dirs, pspell_dir) 
    if test -r $pspell_dir/pspell-config; then 
     AC_FIND_FILE(aspell, $pspell_dirs, pspell_dir)
     if test -r $pspell_dir/aspell; then 
       HAVE_PSPELL=yes 
       have_speller="yes"
       speller="pspell"
       AC_DEFINE(USE_PSPELL, 1, [Define if you want to use pspell])
       AC_DEFINE(USE_SPELL, 1, [Define if you want to spell checking])
       SPELL_LIBS="-L$pspell_dir -laspell -lltdl"
       AC_SUBST(SPELL_LIBS) 
       echo "found pspell-config"
     fi
   fi
 fi
fi

dnl ====================================
dnl = Begin tests for scrollkeeper
dnl ====================================
AC_PATH_PROG(SCROLLKEEPER_CONFIG, scrollkeeper-config,no)
if test x$SCROLLKEEPER_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find scrollkeeper-config. Please install the scrollkeeper package: http://scrollkeeper.sourceforge.net)
fi
dnl ====================================
dnl = End tests for scrollkeeper
dnl ====================================Y
SCROLLKEEPER_BUILD_REQUIRED=0.3.5
AC_SUBST(SCROLLKEEPER_BUILD_REQUIRED)


dnl Set PACKAGE_LOCALE_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale",[package LOCALE directory])
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale",[package LOCALE directory])
fi


dnl Set PACKAGE SOURCE DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`

dnl Set PACKAGE PREFIX
if test "x${prefix}" = "xNONE"; then
  packageprefix=${ac_default_prefix}
else
  packageprefix=${prefix}
fi

dnl Set PACKAGE DATA & DOC DIR
packagedatadir=share/${PACKAGE}
packagedocdir=share/doc/${PACKAGE}

dnl Set PACKAGE DIRs in config.h.
packagepixmapsdir=share/pixmaps/${PACKAGE}
packagehelpdir=share/gnome/help/${PACKAGE}
packagemenudir=share/applications

dnl Subst PACKAGE_DATA_DIR.
NO_PREFIX_PACKAGE_DATA_DIR="${packagedatadir}"
AC_SUBST(NO_PREFIX_PACKAGE_DATA_DIR)
PACKAGE_DATA_DIR="${packageprefix}/${packagedatadir}"
AC_SUBST(PACKAGE_DATA_DIR)

dnl Subst PACKAGE_DOC_DIR.
NO_PREFIX_PACKAGE_DOC_DIR="${packagedocdir}"
AC_SUBST(NO_PREFIX_PACKAGE_DOC_DIR)
PACKAGE_DOC_DIR="${packageprefix}/${packagedocdir}"
AC_SUBST(PACKAGE_DOC_DIR)

dnl Subst PACKAGE_PIXMAPS_DIR.
NO_PREFIX_PACKAGE_PIXMAPS_DIR="${packagepixmapsdir}"
AC_SUBST(NO_PREFIX_PACKAGE_PIXMAPS_DIR)
PACKAGE_PIXMAPS_DIR="${packageprefix}/${packagepixmapsdir}"
AC_SUBST(PACKAGE_PIXMAPS_DIR)

dnl Subst PACKAGE_HELP_DIR.
NO_PREFIX_PACKAGE_HELP_DIR="${packagehelpdir}"
AC_SUBST(NO_PREFIX_PACKAGE_HELP_DIR)
PACKAGE_HELP_DIR="${packageprefix}/${packagehelpdir}"
AC_SUBST(PACKAGE_HELP_DIR)

dnl Subst PACKAGE_MENU_DIR.
NO_PREFIX_PACKAGE_MENU_DIR="${packagemenudir}"
AC_SUBST(NO_PREFIX_PACKAGE_MENU_DIR)
PACKAGE_MENU_DIR="${packageprefix}/${packagemenudir}"
AC_SUBST(PACKAGE_MENU_DIR)

AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${packageprefix}/${packagedatadir}",[package data directory])
AC_DEFINE_UNQUOTED(PACKAGE_DOC_DIR, "${packageprefix}/${packagedocdir}",[package doc directory])
AC_DEFINE_UNQUOTED(PACKAGE_PIXMAPS_DIR, "${packageprefix}/${packagepixmapsdir}",[package pixmap directory])
AC_DEFINE_UNQUOTED(PACKAGE_HELP_DIR, "${packageprefix}/${packagehelpdir}",[package help directory])
AC_DEFINE_UNQUOTED(PACKAGE_MENU_DIR, "${packageprefix}/${packagemenudir}",[package menu directory])
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}",[package source directory])

dnl src/gnome/Makefile

AC_OUTPUT([ m4/Makefile 
Makefile
po/Makefile.in
doc/Makefile
doc/help/Makefile
doc/help/C/Makefile
doc/help/fr/Makefile
src/Makefile
src/backend/Makefile
src/gnome2/Makefile
src/main/Makefile
gnomesword.desktop.in
gnomesword.spec
])

echo
echo "Summary of GnomeSword configuration:"
echo

echo "Building for Gnome:              2.x"  


if test "x$have_speller" = xyes; then
        echo "Spellchecking:                enabled"
	echo "using:                            $speller"
else
        echo "Spellchecking:                disabled"
fi

echo "install directory:              ${prefix}/bin"
