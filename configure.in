AC_INIT([xiphos],[3.1.2],[http://sourceforge.net/tracker/?group_id=5528&atid=105528])
AC_PREREQ(2.60)

AC_CONFIG_SRCDIR([src/gnome2/xiphos.c])
AC_CONFIG_HEADERS([config.h])

AM_INIT_AUTOMAKE([foreign dist-bzip2])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES])
AC_SUBST([ACLOCAL_AMFLAGS], ["-I $ac_macro_dir \$(ACLOCAL_FLAGS)"])

AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_CXX

AC_CHECK_FUNCS(strcasestr, [AM_CONDITIONAL(HAVE_STRCASESTR, true)], [AM_CONDITIONAL(HAVE_STRCASESTR, false)])

IT_PROG_INTLTOOL([])
AC_PROG_LIBTOOL dnl using old name instead of LT_INIT for compatability

AC_SUBST([GETTEXT_PACKAGE], [xiphos])
AM_GLIB_GNU_GETTEXT
AC_DEFINE([GETTEXT_PACKAGE],  [PACKAGE_TARNAME], [Define to the gettext package name.])

PKG_PROG_PKG_CONFIG([])
GNOME_DOC_INIT

AC_SUBST(DIRS, [["backend gecko editor main gnome2"]])
AC_SUBST(xiphos_exec, [[xiphos]])

REQUIRED_LIBS="glib-2.0 gtk+-2.0 >= 2.12 libxml-2.0 libglade-2.0 libgtkhtml-3.14 >= 3.23  sword dbus-glib-1 libgsf-1 gtkhtml-editor"

AC_ARG_WITH([gecko], AS_HELP_STRING([--without-gecko], [Compile using gtkhtml backend instead]))

AS_IF([test "x$with_gecko" != "xno"], [
	    AC_DEFINE(USE_GTKMOZEMBED, 1, [Define if you want to use gtkmozembed])
	    PKG_CHECK_MODULES(GECKO, libxul-embedding > 1.9.0)
	    GECKO_CFLAGS="`$PKG_CONFIG --define-variable=includetype=unstable --cflags libxul-embedding`"
	    GECKO_HOME="`$PKG_CONFIG --variable=sdkdir libxul-embedding`"
	    AC_DEFINE_UNQUOTED(GECKO_HOME, ["$GECKO_HOME"], [Gecko sdkdir])
	    have_gecko=true
	    ],[
	    AC_MSG_CHECKING([[for GECKO]])
	    AC_MSG_RESULT([[disabled as requested]])
	    AC_DEFINE(GTKHTML, 1, [Define if wish to use gtkhtml instead of gtkmozembed])])

AM_CONDITIONAL(HAVE_GECKO, test x$have_gecko = xtrue)

AC_DEFINE(HAVE_DBUS, 1, [Define to enable dbus])

AS_CASE([$host_os], [mingw*],
		    [REQUIRED_LIBS="$REQUIRED_LIBS gmodule-no-export-2.0"],
		    [REQUIRED_LIBS="$REQUIRED_LIBS gmodule-export-2.0"])

AC_MSG_CHECKING([for gtk+-unix-print])
PKG_CHECK_EXISTS(gtk+-unix-print-2.0,
		[AC_DEFINE(USE_GTKUPRINT, 1, [Define if you want to use gtk-unix-print])
			[REQUIRED_LIBS="$REQUIRED_LIBS gtk+-unix-print-2.0"]
			AC_MSG_RESULT([yes])],
		[AC_MSG_RESULT([no])])

AC_MSG_CHECKING([for gtk+-2.14])
AC_ARG_WITH([gnome], AS_HELP_STRING([--with-gtk214], [Compile using gtk+-2.14 or better]))

AS_IF([test "x$with_gtk214" != "xno"],[
	   PKG_CHECK_EXISTS(gtk+-2.0 >= 2.14, [have_gtk214="yes"], [have_gtk214="no"])],
	   [have_gtk214="no"])

AS_IF([test "x$have_gtk214" = "xyes"],
      [AC_DEFINE(HAVE_GTK214, 1, [We have gnome-2.14 hence we can use modern API])
      		AC_MSG_RESULT([yes])],
      [AS_IF([test "x$with_gtk214" = "xno"],
             [REQUIRED_LIBS="$REQUIRED_LIBS libgnomeui-2.0"
	     AC_MSG_RESULT([no])])
      ])

PKG_CHECK_MODULES(XIPHOS, "$REQUIRED_LIBS")

AC_MSG_CHECKING([for SWORD multiverse])
PKG_CHECK_EXISTS(sword > 1.5.11,
		[AC_DEFINE(SWORD_MULTIVERSE, 1, [Define if sword has multiverse support])
			AC_MSG_RESULT([yes])],
		[AC_MSG_RESULT([no])])

AC_DEFINE(USE_GTKHTML3_14, 1, [Define if you want to use GtkHtml-3.14])
GTKHTML_DATA_DIR=`$PKG_CONFIG --variable=gtkhtml_datadir libgtkhtml-3.14`
AC_DEFINE_UNQUOTED(GTKHTML_DATA_DIR, ["$GTKHTML_DATA_DIR"], [GtkHTML data directory])
AC_DEFINE_UNQUOTED(GTKHTML_API_VERSION, ["$PKG_CONFIG --variable gtkhtml_apiversion libgtkhtml-3.14"], [The gtkhtml api version])
AC_SUBST(GTKHTML_DATA_DIR)

AC_SUBST(XIPHOS_LIBS)
AC_SUBST(XIPHOS_CFLAGS)

AM_MAINTAINER_MODE([enable])
GNOME_COMPILE_WARNINGS
GNOME_CXX_WARNINGS

AC_MSG_CHECKING([deprecated symbols])
AC_ARG_ENABLE([deprecated], AS_HELP_STRING([--disable-deprecated], [Error out the build when deprecated symbols are used]))
AS_IF([test "x$enable_deprecated" == "xno"],
	   [AC_MSG_RESULT([yes])
	   GNOME_MAINTAINER_MODE_DEFINES],
	   [AC_MSG_RESULT([no])])

AC_MSG_CHECKING([for debug build])
AC_ARG_ENABLE([debug],
	AS_HELP_STRING([--enable-debug], [Enable debugging @<:@default=no@:>@]))
AS_IF([test "x$enable_debug" = "xyes"], [
	    AC_DEFINE(DEBUG, 1, [Enable additional debugging at the expense of performance and size])
			AC_MSG_RESULT([yes])],
	    [AC_MSG_RESULT([no])])

AC_ARG_ENABLE([as-needed],
	AS_HELP_STRING([--enable-as-needed], [Pass -Wl --as-needed to linker @<:@default=no@:>@]))
AS_IF([test "x$enable_as_needed" = "xyes"], [AC_SUBST([AM_LDFLAGS],[[-Wl,--as-needed]])])

AC_CONFIG_FILES([
Makefile
po/Makefile.in
doc/Makefile
help/Makefile
pixmaps/Makefile
src/Makefile
src/backend/Makefile
src/gecko/Makefile
src/editor/Makefile
src/gnome2/Makefile
src/main/Makefile
ui/Makefile
xiphos.desktop.in
xiphos.spec
])
AC_OUTPUT
