dnl Process this file with autoconf to produce a configure script.
 
AC_INIT(configure.in)
AM_INIT_AUTOMAKE(gnomesword-1.0, 0.9.dev5)
AM_CONFIG_HEADER(config.h)

AC_PROG_CC

dnl check for libtool
AM_PROG_LIBTOOL

dnl Pick up the Gnome macros.
dnl AM_ACLOCAL_INCLUDE(macros)

dnl GNOME_INIT
AC_ISC_POSIX
AC_HEADER_STDC
AC_HAVE_HEADERS(stdlib.h unistd.h string.h errno.h stdio.h sys/stat.h ctype.h getopt.h math.h time.h sys/types.h fcntl.h netdb.h netinet/in.h sys/socket.h arpa/inet.h dirent.h sys/select.h sys/time.h sys/ipc.h)

dnl Languages which your application supports
ALL_LINGUAS="bg de es es_ES fr sk"
dnl AM_GNOME_GETTEXT
dnl AM_GNU_GETTEXT([external])
AM_GLIB_GNU_GETTEXT


dnl Set PACKAGE_*_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale")
  AC_DEFINE_UNQUOTED(PACKAGE_PIXMAPS_DIR, "${ac_default_prefix}/${DATADIRNAME}/pixmaps/${PACKAGE}")
  AC_DEFINE_UNQUOTED(PACKAGE_HELP_DIR, "${ac_default_prefix}/${DATADIRNAME}/gnome/help/${PACKAGE}")
  AC_DEFINE_UNQUOTED(PACKAGE_MENU_DIR, "${ac_default_prefix}/${DATADIRNAME}/gnome/apps")
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/${DATADIRNAME}/${PACKAGE}")
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale")
  AC_DEFINE_UNQUOTED(PACKAGE_PIXMAPS_DIR, "${prefix}/${DATADIRNAME}/pixmaps/${PACKAGE}")
  AC_DEFINE_UNQUOTED(PACKAGE_HELP_DIR, "${prefix}/${DATADIRNAME}/gnome/help/${PACKAGE}")
  AC_DEFINE_UNQUOTED(PACKAGE_MENU_DIR, "${prefix}/${DATADIRNAME}/gnome/apps")
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/${DATADIRNAME}/${PACKAGE}")
fi


dnl GNOME_COMPILE_WARNINGS
dnl GNOME_X_CHECKS

dnl AC_ARG_WITH(icu,[--with-icu use ICU for unicode [default=no]],,with_icu=no)

dnl ******************************
dnl use gtkembedmoz
dnl ******************************
AC_ARG_ENABLE(gtkembedmoz,[--enable-gtkembedmoz enable gtkembedmoz],gtkembedmoz=$enableval,gtkembedmoz="no") 


if test "x$gtkembedmoz" = xyes; then
	pkg_modules="gtkhtml-1.1 gal libxml gconf mozilla-gtkmozembed"
	AC_DEFINE(USE_GTKEMBEDMOZ, 1, [Define if you want to use gtkembedmoz])
else
	pkg_modules="gtkhtml-1.1 gal libxml gconf"
fi
PKG_CHECK_MODULES(PACKAGE, [$pkg_modules])
AC_SUBST(PACKAGE_CFLAGS)
AC_SUBST(PACKAGE_LIBS)

GS_CHECK_LIB(gdk-pixbuf with GNOME canvas support, gnomecanvaspixbuf, 0.11.0)
GS_CHECK_LIB(GnomePrint, print, 0.29.0.0)

dnl Checks select argument types
AC_FUNC_SELECT_ARGTYPES
AC_HEADER_TIME

AC_PROG_CXX
AC_LANG_CPLUSPLUS


AC_CHECK_STATIC_LINKING(ac_use_static)
AC_CHECK_SWORD(1.5.5.99, [$ac_use_static])


dnl if test x$with_icu = xyes; then	
dnl 	AC_DEFINE(ICU_SWORD, 1, [Define if you want to use ICU_SWORD])
dnl fi

dnl ******************************
dnl spell checking
dnl ******************************
AC_ARG_ENABLE(use_ispell,[--enable-use_ispell enable use_ispell],use_ispell=$enableval,use_ispell="no") 
AC_ARG_ENABLE(use_aspell,[--enable-use_aspell enable use_aspell],use_aspell=$enableval,use_aspell="no") 

PSPELL_LIBS=""
AC_SUBST(PSPELL_LIBS)
have_speller="no"
speller="none"
if test "x$use_ispell" = xyes; then
   dnl looking for ispell 
   
   AC_MSG_CHECKING([for ispell]) 
   ispell_dirs="${prefix}/bin $ac_ispell_dir/bin /usr/bin /usr/local/bin /opt/bin" 
   AC_FIND_FILE(ispell, $ispell_dirs, ispell_dir) 
   if test -r $ispell_dir/ispell; then 
      HAVE_ISPELL=yes 
      AC_DEFINE(USE_ISPELL, 1, [Define if you want to use ispell])
      AC_DEFINE(USE_SPELL, 1, [Define if you want to spell checking])
      echo "found"
      have_speller="yes"
      speller="ispell"
   fi   
fi  
if test "x$use_aspell" = xyes; then
   dnl looking for aspell 
   
   AC_MSG_CHECKING([for aspell]) 
   aspell_dirs="${prefix}/bin $ac_aspell_dir/bin /usr/bin /usr/local/bin /opt/bin" 
   AC_FIND_FILE(aspell, $aspell_dirs, aspell_dir) 
   if test -r $aspell_dir/aspell; then 
      HAVE_ASPELL=yes 
      AC_DEFINE(USE_ASPELL, 1, [Define if you want to use aspell])
      AC_DEFINE(USE_SPELL, 1, [Define if you want to spell checking])
      echo "found"
      have_speller="yes"
      speller="aspell"
   fi    
fi
if test "x$have_speller" = xno; then
   dnl looking for pspell 
   
   AC_MSG_CHECKING([for pspell]) 
   pspell_dirs="${prefix}/bin $ac_pspell_dir/bin /usr/bin /usr/local/bin /opt/bin" 
   AC_FIND_FILE(pspell-config, $pspell_dirs, pspell_dir) 

   if test -r $pspell_dir/pspell-config; then 
       HAVE_PSPELL=yes 
       have_speller="yes"
       speller="pspell"
       AC_DEFINE(USE_PSPELL, 1, [Define if you want to use pspell])
       AC_DEFINE(USE_SPELL, 1, [Define if you want to spell checking])
       PSPELL_LIBS="-L$pspell_dir -lpspell -lltdl"
       AC_SUBST(PSPELL_LIBS) 
      echo "found"
   fi
fi


dnl ******************************
dnl GdkPixbuf
dnl ******************************
PIXBUF_LIBS=`gnome-config --libs gdk_pixbuf gnomecanvaspixbuf`
PIXBUF_CFLAGS=`gnome-config --cflags gdk_pixbuf gnomecanvaspixbuf `
AC_SUBST(PIXBUF_LIBS)
AC_SUBST(PIXBUF_CFLAGS)
have_pixbuf="yes"

dnl ******************************
dnl GnomePrint 
dnl ******************************
GNOME_PRINT_LIBS=`gnome-config --libs print`
GNOME_PRINT_CFLAGS=`gnome-config --cflags print`
AC_SUBST(GNOME_PRINT_LIBS)
AC_SUBST(GNOME_PRINT_CFLAGS)
have_gnomeprint="yes"

  
EXTRA_GNOME_LIBS="`gnome-config --libs ` $THREADS_LIBS `unicode-config --libs`"
EXTRA_GNOME_CFLAGS="`gnome-config --cflags ` $THREADS_CFLAGS `unicode-config --cflags`"

AC_SUBST(EXTRA_GNOME_LIBS)
AC_SUBST(EXTRA_GNOME_CFLAGS)

LIBS="$LIBS -L/usr/local/lib -L/usr/lib `xml-config --libs`"

dnl Only use -Wall if we have gcc
if test "x$GCC" = "xyes"; then
  if test -z "`echo "$CFLAGS" | grep "\-Wall" 2> /dev/null`" ; then
    CFLAGS="$CFLAGS -Wall"
  fi
fi



AC_OUTPUT([ 
m4/Makefile 
Makefile
po/Makefile.in
doc/Makefile
doc/help/Makefile
src/Makefile
src/backend/Makefile
src/gnome/Makefile
src/main/Makefile
])


echo
echo "Summary of GnomeSword1 configuration:"
echo
if test "x$gtkembedmoz" = xyes; then
	echo "gtkembedmoz:                enabled"
else
	echo "gtkembedmoz:                disabled"
fi
if test "x$have_speller" = xyes; then
        echo "Spellchecking:                enabled"
	echo "using:                            $speller"
else
        echo "Spellchecking:                disabled"
fi

echo "install directory:              ${prefix}/bin"
echo "swordlibs:                      $LIB_SWORD"
