AC_INIT([xiphos],[3.1.1],[http://sourceforge.net/tracker/?group_id=5528&atid=105528])
AC_PREREQ(2.60)

AC_CONFIG_SRCDIR([src/gnome2/xiphos.c])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_HEADERS([config.h])

AM_INIT_AUTOMAKE([foreign])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES])
AC_SUBST([ACLOCAL_AMFLAGS], ["-I $ac_macro_dir \$(ACLOCAL_FLAGS)"])

AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_CXX

AC_CHECK_FUNCS(strcasestr, [AM_CONDITIONAL(HAVE_STRCASESTR, true)], [AM_CONDITIONAL(HAVE_STRCASESTR, false)])

IT_PROG_INTLTOOL([])
AC_PROG_LIBTOOL dnl using old name instead of LT_INIT for compatability

AC_SUBST([GETTEXT_PACKAGE], [xiphos])
AM_GLIB_GNU_GETTEXT
AC_DEFINE([GETTEXT_PACKAGE], [PACKAGE_TARNAME], [Define to the gettext package name.])

GNOME_DOC_INIT

AC_SUBST(DIRS, [["backend gecko editor main gnome2"]])
AC_SUBST(xiphos_exec, [[xiphos]])

PKG_PROG_PKG_CONFIG([])

AS_IF([test "x$with_gecko" != "xno"], [
	    GECKO_INIT([GECKO])
	    AC_DEFINE(USE_GTKMOZEMBED, 1, [Define if you want to use gtkmozembed])
	    AM_CONDITIONAL(USE_GTKMOZEMBED, true)
	    AS_CASE([$GECKO],
		[xulrunner], [
		     PKG_CHECK_MODULES([GECKO_COMPONENT],[${gecko_cv_gecko}-xpcom >= 1.8 $gecko_cv_extra_pkg_dependencies])],
		[libxul*],   [
		     PKG_CHECK_MODULES([GECKO_COMPONENT],[$GECKO $gecko_cv_extra_pkg_dependencies])
		     GECKO_COMPONENT_CFLAGS="$GECKO_COMPONENT_CFLAGS `$PKG_CONFIG --cflags ${gecko_cv_gecko}` `$PKG_CONFIG --define-variable=includetype=unstable --cflags ${gecko_cv_gecko}`"],
		[*firefox],  [
		     PKG_CHECK_MODULES([GECKO_COMPONENT],[${gecko_cv_gecko}-xpcom >= 1.5 $gecko_cv_extra_pkg_dependencies])],
		[AC_MSG_ERROR([$gecko_cv_gecko is not supported])])
	    AC_SUBST([GECKO])
	    AC_SUBST(GECKO_HOME)
	    AC_SUBST(GECKO_COMPONENT_LIBS)
	    AC_SUBST(GECKO_COMPONENT_CFLAGS)
	    AC_SUBST([GECKO_FLAVOUR])
	    AC_SUBST([GECKO_INCLUDE_ROOT])
	    AC_SUBST([GECKO_PREFIX])
	    AC_SUBST([GECKO_EXTRA_LIBS])
	    AC_SUBST([GECKO_GLUE_LIBS])
	    ],[
	    AC_MSG_CHECKING([[for GECKO]])
	    AC_MSG_RESULT([[disabled as requested]])
	    AM_CONDITIONAL(USE_GTKMOZEMBED, false)
	    AC_DEFINE(GTKHTML, 1, [Define if wish to use gtkhtml instead of gtkmozembed])])

GECKO_DEFINES

AM_CONDITIONAL([WITH_GECKO_ENGINE], [test "$with_engine" = "mozilla"])
AM_CONDITIONAL([HAVE_XULRUNNER],[test "$gecko_cv_gecko" = "xulrunner"])
AM_CONDITIONAL([WITH_XULRUNNER_ENGINE],[test "$with_engine" = "xulrunner"])

REQUIRED_LIBS="glib-2.0 gtk+-2.0 libgnomeui-2.0 libxml-2.0 libglade-2.0 libgtkhtml-3.14 sword"

AS_CASE([$host_os], [mingw*],
		    [REQUIRED_LIBS="$REQUIRED_LIBS gmodule-no-export-2.0"],
		    [REQUIRED_LIBS="$REQUIRED_LIBS gmodule-export-2.0"])

AC_MSG_CHECKING([for widget tooltips])
PKG_CHECK_EXISTS(gtk+-2.0 >= 2.12,
		[AC_DEFINE(HAVE_WIDGET_TOOLTIP_TEXT, 1, [Means gtk_widget_set_tooltip_text works])
			AC_MSG_RESULT([yes])],
		[AC_MSG_RESULT([no])])

AC_MSG_CHECKING([for gtk+-unix-print])
PKG_CHECK_EXISTS(gtk+-unix-print-2.0,
		[AC_DEFINE(USE_GTKUPRINT, 1, [Define if you want to use gtk-unix-print])
			[REQUIRED_LIBS="$REQUIRED_LIBS gtk+-unix-print-2.0"]
			AC_MSG_RESULT([yes])],
		[AC_MSG_RESULT([no])])


AC_ARG_WITH([editor],
    AS_HELP_STRING([--without-editor], [Ignore presence of gtkhtml-editor and use bonobo-editor instead]))

AC_MSG_CHECKING([for editor])

AS_IF([test "x$with_editor" != "xno"],
      [PKG_CHECK_EXISTS([libgtkhtml-3.14 > 3.23 gtkhtml-editor], [have_editor=yes], [have_editor=no])],
      [have_editor=no])

AS_IF([test "x$have_editor" = "xyes"],
      [AC_MSG_RESULT([gtkhtml-editor])
      AC_DEFINE(USE_GTKHTML3_14_23, 1, [Define if you want to use GtkHtml-3.14])
      REQUIRED_LIBS="$REQUIRED_LIBS gtkhtml-editor"
      AM_CONDITIONAL(USE_GTKHTML_BONOBO_EDITOR, false)],
      [AC_MSG_RESULT([bonobo])
      AS_IF([test "x$with_editor" = "xyes"],
            [AC_MSG_ERROR([gtkhtml-editor requested but not found])],
	    [AM_CONDITIONAL(USE_GTKHTML_BONOBO_EDITOR, true)
	    AC_SUBST(ORBIT_IDL, [`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`])
	    AC_SUBST(BONOBO_IDL_INCLUDES, ["-I`$PKG_CONFIG --variable=idldir libbonobo-2.0` -I`$PKG_CONFIG --variable=idldir bonobo-activation-2.0`"])])
])

PKG_CHECK_MODULES(XIPHOS, "$REQUIRED_LIBS")

AC_MSG_CHECKING([for SWORD multiverse])
PKG_CHECK_EXISTS(sword > 1.5.11,
		[AC_DEFINE(SWORD_MULTIVERSE, 1, [Define if sword has multiverse support])
			AC_MSG_RESULT([yes])],
		[AC_MSG_RESULT([no])])

AC_DEFINE(USE_GTKHTML3_14, 1, [Define if you want to use GtkHtml-3.14])
GTKHTML_DATA_DIR=`$PKG_CONFIG --variable=gtkhtml_datadir libgtkhtml-3.14`
AC_DEFINE_UNQUOTED(GTKHTML_DATA_DIR, ["$GTKHTML_DATA_DIR"], [GtkHTML data directory])
AC_DEFINE_UNQUOTED(GTKHTML_API_VERSION, ["$PKG_CONFIG --variable gtkhtml_apiversion libgtkhtml-3.14"], [The gtkhtml api version])
AC_SUBST(GTKHTML_DATA_DIR)

AC_SUBST(XIPHOS_LIBS)
AC_SUBST(XIPHOS_CFLAGS)

AM_MAINTAINER_MODE([enable])
GNOME_COMPILE_WARNINGS
GNOME_CXX_WARNINGS

AC_MSG_CHECKING([for debug build])
AC_ARG_ENABLE([debug],
	AS_HELP_STRING([--enable-debug], [Enable debugging @<:@default=no@:>@]))
AS_IF([test "x$enable_debug" = "xyes"], [
	    AC_DEFINE(DEBUG, 1, [Enable additional debugging at the expense of performance and size])
			AC_MSG_RESULT([yes])],
	    [AC_MSG_RESULT([no])])

AC_ARG_ENABLE([as-needed],
	AS_HELP_STRING([--enable-as-needed], [Pass -Wl --as-needed to linker @<:@default=no@:>@]))
AS_IF([test "x$enable_as_needed" = "xyes"], [AC_SUBST([AM_LDFLAGS],[[-Wl,--as-needed]])])

AC_CONFIG_FILES([
Makefile
po/Makefile.in
doc/Makefile
help/Makefile
src/Makefile
src/backend/Makefile
src/gecko/Makefile
src/editor/Makefile
src/gnome2/Makefile
src/main/Makefile
ui/Makefile
xiphos.desktop.in
xiphos.spec
])
AC_OUTPUT
