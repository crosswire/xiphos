AC_INIT(gnomesword, 2.2.1, http://sourceforge.net/tracker/?group_id=5528&atid=105528)
AC_CONFIG_SRCDIR(src/gnome2/gnomesword.c)
AC_CONFIG_MACRO_DIR([m4])
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)


AM_CONFIG_HEADER(config.h)

AC_PROG_MAKE_SET

DIRS="backend editor main gnome2"
AC_SUBST(DIRS)
gnomesword_exec="gnomesword2"
AC_SUBST(gnomesword_exec)	
PKG_CHECK_MODULES(GNOME, glib-2.0 gtk+-2.0 libgnomeui-2.0 libgnomeprintui-2.2 libxml-2.0 libglade-2.0 ,,exit)
AC_SUBST(GNOME_LIBS)
AC_SUBST(GNOME_CFLAGS)
dnl AC_ENABLE_STATIC(yes)

PKG_CHECK_MODULES(SWORD, sword >= 1.5.9, , exit)
AC_SUBST(SWORD_LIBS)
AC_SUBST(SWORD_CFLAGS)

dnl AC_CHECK_SWORD(1.5.8, [NO])


dnl Checks select argument types
AC_FUNC_SELECT_ARGTYPES
AC_HEADER_TIME

AC_PROG_INTLTOOL()

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AM_PROG_LIBTOOL

AC_PROG_CXX
AC_LANG_CPLUSPLUS


dnl ================================================================
dnl Gettext stuff.
dnl ================================================================
GETTEXT_PACKAGE=gnomesword
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [Gettext package])
dnl Languages which your application supports
	ALL_LINGUAS=""

AM_GLIB_GNU_GETTEXT

dnl ================================================================
dnl check for GtkHTML
dnl ================================================================
GTKHTML_LIBS=""
GTKHTML_CFLAGS=""

PKG_CHECK_MODULES(GTKHTML, libgtkhtml-3.8 >= 3.13, have_gtkhtml=yes,have_gtkhtml=no)
if test "x$have_gtkhtml" = xyes; then
	AC_DEFINE(USE_GTKHTML38_3_13, 1, [Define if you want to use GtkHtml-3.8-3.13])
	AC_DEFINE(USE_GTKHTML38, 1, [Define if you want to use GtkHtml-3.8])

else
	PKG_CHECK_MODULES(GTKHTML, libgtkhtml-3.8, have_gtkhtml=yes,have_gtkhtml=no)
	AC_DEFINE(USE_GTKHTML38, 1, [Define if you want to use GtkHtml-3.8])

fi
dnl gtkhtml_datadir
GTKHTML_DATA_DIR="`$PKG_CONFIG --variable=gtkhtml_datadir libgtkhtml-3.8`"
dnl gtkhtml api version
GTKHTML_API_VERSION=`$PKG_CONFIG --variable gtkhtml_apiversion libgtkhtml-3.8`
AC_DEFINE_UNQUOTED(GTKHTML_DATA_DIR, "${GTKHTML_DATA_DIR}", [GtkHTML data directory])
AC_DEFINE_UNQUOTED(GTKHTML_API_VERSION, "$GTKHTML_API_VERSION", [The gtkhtml api version])
AC_SUBST(GTKHTML_LIBS)
AC_SUBST(GTKHTML_CFLAGS)
AC_SUBST(GTKHTML_DATA_DIR)




AC_ARG_ENABLE(moz_embed,[  --enable-moz_embed    use moz_embed [default=no]],moz_embed=$enableval,moz_embed=no)
if test "x$moz_embed" = xyes; then	
  GS_CHECK_MOZILLA(firefox)
else
  MOZILLA_LIBS=""
  MOZILLA_CFLAGS=""
  AC_SUBST(MOZILLA_LIBS)
  AC_SUBST(MOZILLA_CFLAGS)
fi

AC_ARG_ENABLE(opensuse102,[  --enable-opensuse102    use opensuse102 [default=no]],opensuse102=$enableval,opensuse102=no)
if test "x$opensuse102" = xyes; then	
	AC_DEFINE(SUSE_10_2, 1, [Define if you are using opensuse10.2])
fi

AC_ARG_ENABLE(sword_svn,[  --enable-sword_svn        use svn sword [default=no]],sword_svn=$enableval,sword_svn=no)
if test "x$sword_svn" = xyes; then
   AC_DEFINE(USE_SWORD_SVN, 1, [Define if you want to use svn sword])
fi

AC_ARG_ENABLE(debug,[  --enable-debug          build debug library [default=no]],debug=$enableval,debug=no)
CXXFLAGS="$CXXFLAGS -ftemplate-depth-25"

AM_MAINTAINER_MODE
if test "x$enable_maintainer_mode" = "xyes"; then
  AC_DEFINE(MAINTAINER_MODE, 1, [Define to 1 if you wish to enable 'maintainer-only' behavior.])
  disable_werror=no
  enable_debug=yes
dnl   A_CPPFLAGS="-DG_DISABLE_DEPRECATED -DGDK_DISABLE_DEPRECATED -DGDK_PIXBUF_DISABLE_DEPRECATED -DGCONF_DISABLE_DEPRECATED -DGNOME_VFS_DISABLE_DEPRECATED -DBONOBO_UI_DISABLE_DEPRECATED -DBONOBO_DISABLE_DEPRECATED -DLIBGLADE_DISABLE_DEPRECATED -DPANGO_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED -DGNOME_DISABLE_DEPRECATED"
else
  disable_werror=yes
  A_CPPFLAGS=
fi
AC_SUBST(A_CPPFLAGS)

if test x$debug = xyes; then
  AC_DEFINE(DEBUG, 1, [Define if you want to see debug messages])
  if test x$ac_cv_prog_cc_g = xyes; then
    CFLAGS="-g3 -O0"
  else
    CFLAGS="-O0"
  fi
  if test x$ac_cv_prog_cxx_g = xyes; then
    CXXFLAGS="$CXXFLAGS -g3 -O0"
  else
    CXXFLAGS="$CXXFLAGS -O0"
  fi
  CFLAGS="$CFLAGS -Werror"
  CXXFLAGS="$CXXFLAGS -Werror"
fi

ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
AC_SUBST(ORBIT_IDL)

BONOBO_IDL_INCLUDES="-I`$PKG_CONFIG --variable=idldir libbonobo-2.0` -I`$PKG_CONFIG --variable=idldir bonobo-activation-2.0`"
AC_SUBST(BONOBO_IDL_INCLUDES)


dnl 	AM_CONDITIONAL(GNOME_SPELL, test x$use_gnome_spell = xtrue)

dnl 	SPELL_LIBS=""
dnl 	AC_SUBST(SPELL_LIBS)


AC_ARG_ENABLE(cygwin,[  --enable-cygwin    use cygwin [default=no]],cygwin=$enableval,cygwin=no)
if test "x$cygwin" = xno; then
  dnl ====================================
  dnl Gnome-doc-utils
  dnl ====================================
  GNOME_DOC_INIT

  dnl ====================================
  dnl = Begin tests for scrollkeeper
  dnl ====================================
  AC_PATH_PROG(SCROLLKEEPER_CONFIG, scrollkeeper-config,no)
  if test x$SCROLLKEEPER_CONFIG = xno; then
    AC_MSG_ERROR(Couldn't find scrollkeeper-config. Please install the scrollkeeper package: http://scrollkeeper.sourceforge.net)
  fi
  dnl ====================================
  dnl = End tests for scrollkeeper
  dnl ====================================Y
  SCROLLKEEPER_BUILD_REQUIRED=0.3.5
  AC_SUBST(SCROLLKEEPER_BUILD_REQUIRED)
else
  enable_scrollkeeper=no
  AM_CONDITIONAL(ENABLE_SK,  test "x$enable_scrollkeeper" = "xyes")
fi




dnl Set PACKAGE_LOCALE_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale",[package LOCALE directory])
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale",[package LOCALE directory])
fi


dnl Set PACKAGE SOURCE DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`

dnl Set PACKAGE PREFIX
if test "x${prefix}" = "xNONE"; then
  packageprefix=${ac_default_prefix}
else
  packageprefix=${prefix}
fi

INSTALL_PREFIX="${packageprefix}/"
AC_SUBST(INSTALL_PREFIX)
AC_DEFINE_UNQUOTED(INSTALL_PREFIX, "${packageprefix}/",[install prefix])


dnl Set PACKAGE DATA & DOC DIR
packagedatadir=share/${PACKAGE}
packagedocdir=share/doc/${PACKAGE}

dnl Set PACKAGE DIRs in config.h.
packagepixmapsdir=share/pixmaps/${PACKAGE}
packagehelpdir=share/gnome/help/${PACKAGE}
packagemenudir=share/applications

dnl Subst PACKAGE_DATA_DIR.
NO_PREFIX_PACKAGE_DATA_DIR="${packagedatadir}"
AC_SUBST(NO_PREFIX_PACKAGE_DATA_DIR)
PACKAGE_DATA_DIR="${packageprefix}/${packagedatadir}"
AC_SUBST(PACKAGE_DATA_DIR)

dnl Subst PACKAGE_DOC_DIR.
NO_PREFIX_PACKAGE_DOC_DIR="${packagedocdir}"
AC_SUBST(NO_PREFIX_PACKAGE_DOC_DIR)
PACKAGE_DOC_DIR="${packageprefix}/${packagedocdir}"
AC_SUBST(PACKAGE_DOC_DIR)

dnl Subst PACKAGE_PIXMAPS_DIR.
NO_PREFIX_PACKAGE_PIXMAPS_DIR="${packagepixmapsdir}"
AC_SUBST(NO_PREFIX_PACKAGE_PIXMAPS_DIR)
PACKAGE_PIXMAPS_DIR="${packageprefix}/${packagepixmapsdir}"
AC_SUBST(PACKAGE_PIXMAPS_DIR)

dnl Subst PACKAGE_HELP_DIR.
NO_PREFIX_PACKAGE_HELP_DIR="${packagehelpdir}"
AC_SUBST(NO_PREFIX_PACKAGE_HELP_DIR)
PACKAGE_HELP_DIR="${packageprefix}/${packagehelpdir}"
AC_SUBST(PACKAGE_HELP_DIR)

dnl Subst PACKAGE_MENU_DIR.
NO_PREFIX_PACKAGE_MENU_DIR="${packagemenudir}"
AC_SUBST(NO_PREFIX_PACKAGE_MENU_DIR)
PACKAGE_MENU_DIR="${packageprefix}/${packagemenudir}"
AC_SUBST(PACKAGE_MENU_DIR)

AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${packageprefix}/${packagedatadir}",[package data directory])
AC_DEFINE_UNQUOTED(PACKAGE_DOC_DIR, "${packageprefix}/${packagedocdir}",[package doc directory])
AC_DEFINE_UNQUOTED(PACKAGE_PIXMAPS_DIR, "${packageprefix}/${packagepixmapsdir}",[package pixmap directory])
AC_DEFINE_UNQUOTED(PACKAGE_HELP_DIR, "${packageprefix}/${packagehelpdir}",[package help directory])
AC_DEFINE_UNQUOTED(PACKAGE_MENU_DIR, "${packageprefix}/${packagemenudir}",[package menu directory])
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}",[package source directory])

AC_OUTPUT([ m4/Makefile 
Makefile
po/Makefile.in
doc/Makefile
help/Makefile
src/Makefile
src/backend/Makefile
src/editor/Makefile
src/gnome2/Makefile
src/main/Makefile
ui/Makefile
gnomesword.desktop.in
gnomesword.spec
])

echo
echo "Summary of GnomeSword configuration:"

if test "x$moz_embed" = xyes; then
    echo "use mozilla:              enabled"
else
    echo "not using mozilla"
fi
echo "install directory:      ${prefix}/bin"

if test "x$debug" = xyes; then
  echo "debug:                    enabled"
  if test "x$have_gtkhtml" = xyes; then
    echo "GTKHTML_CFLAGS        $GTKHTML_CFLAGS"
  fi

  if test "x$moz_embed" = xyes; then
    echo "MOZILLA_CFLAGS        $MOZILLA_CFLAGS"
  fi
  if test "x$sword_svn" = xyes; then
    echo "Sword SVN:             enabled"
  fi

  if test "x$ac_static_sword" = xYES; then
    echo "Static link to Sword:           enabled"
  else  
    echo "Dynamic link to Sword:          enabled"
  fi
  
  echo "SWORD_LIBS:   $SWORD_LIBS"
  echo "SWORD_CFLAGS: $SWORD_CFLAGS"
  echo "CFLAGS: $CFLAGS"
  echo "CPPFLAGS: $CPPFLAGS"
  echo "CXXFLAGS: $CXXFLAGS"
  echo "GNOME_CFLAGS: $GNOME_CFLAGS"
  echo "GTKHTML_DATA_DIR        $GTKHTML_DATA_DIR"
  echo "GTKHTML_API_VERSION     $GTKHTML_API_VERSION"
fi
