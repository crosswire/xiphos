#!/usr/bin/env python
# encoding: utf8

import os.path

import Utils


def configure(self):

    ## make locale_set.c for switching language

    fout_name = os.path.abspath('src/gnome2/locale_set.c')
    Utils.pprint('CYAN', 'Making %s' % fout_name)

    fin = open('po/LINGUAS')
    fout = open(fout_name, 'w')
    locales_old = fin.readline().strip().split()
    fin.close()
    locales_new = []

    locales_old.append('en_US')

    # convert locale names to 5 chars version
    for loc in locales_old:
        if loc == 'cs':    
            loc += '_CZ'   # special case, czech.
        elif loc == 'fa':
            loc += '_IR'   # special case, iran.
        elif loc == 'zh':
            loc += '_CN'   # special case, simplified chinese.
        elif len(loc) == 2:
            loc = loc + '_' + loc.upper()
        locales_new.append(loc)

    # aplhabetize
    locales_new.sort()

    # write
    fout.write('char *locale_set[] = {\n')
    for loc in locales_new:
        fout.write('        "%s",\n' % loc)
    fout.write('        (char*)0\n')
    fout.write('};\n')
    fout.close



def build(bld):

    env = bld.env
    sub = Utils.subst_vars
    
    # GTK
    #gtk = 'LIBGTK_X11_2_0'
    #if not env['HAVE_LIBGTK_X11_2_0']:
        #gtk = 'LIBGTK_WIN32_2_0'

    #gtk += ' %s' % 'GLIB GMODULEEXP'
    
    # use GECKO as html engine
    objects = 'backend editor main'
    if not bld.env['ENABLE_GTKHTML']:
        objects += ' %s' % 'gecko'

    # GTKHTML
    gtkhtml = 'GTKHTML'
    if env['HAVE_GTKHTML_EDITOR']:
        gtkhtml += ' %s' % 'GTKHTML_EDITOR'

    # GECKO
    gecko = 'GTKMOZEMBED'
    if env['HAVE_GTKMOZEMBED_UNSTABLE']:
        gecko += ' %s' % 'GTKMOZEMBED_UNSTABLE'

    # on WIN32 compile Xiphos icon into executable
    winresource = ''
    staticlib = []
    if env['IS_WIN32']:
        winresource = '../../win32/res/res.rc'
        # staticlib = 'sword'.split()

    # DATADIR direct in config.h - conflict in win32 (mingw)
    defines = sub('''
        PREFIX="${PREFIX}"
        SYSCONFDIR="${SYSCONFDIR}"
        DATADIR="${DATAROOTDIR}"
        LIBDIR="${LIBDIR}"
        SHARE_DIR="${DATAROOTDIR}/${PACKAGE}"
    ''', env)
        
        
    lib = bld.new_task_gen(
        features = 'cxx cc cprogram',
        includes = '. ../.. ../../src ../../src/editor %s' % bld.env['GECKO_INCLUDE'], # ../../ for config.h
        defines = defines, 
        source = '%s' % winresource, 
        target = 'xiphos',
        #uselib = 'GNOMEUI GECKONSPR MAGICK GECKONSS GTK GLADE GLIB GMODULEEXP UPRINT SWORD  %s %s' % (gtkhtml, gecko),
        #uselib = 'WSOCK GNOMEUI GECKONSPR MAGICK GECKONSS GTK GLADE GLIB GMODULEEXP UPRINT SWORD  %s %s' % (gtkhtml, gecko),
        uselib= bld.env['ALL_LIBS'],
        staticlib = staticlib, # like cflag -lsword
        add_objects = objects, # used instead of libbackend.a, libgecko.a, libeditor.a, libmain.a
        install_path= '${BINDIR}',
    )

    # DBUS generate binding and marshallers
    if env['HAVE_DBUS']:
        lib.add_dbus_file('ipc-interface.xml', 'ipc_object', 'glib-server')
        lib.add_marshal_file('marshal.list', 'ipc_marshal')
        lib.find_sources_in_dirs('.')
    else:
        lib.find_sources_in_dirs('.', excludes=['ipc.c',])
  
    # notification about project name change
    if not env['IS_WIN32']:
        is_executable = 0755
        bld.install_files('${BINDIR}', 'gnomesword2', chmod=is_executable)

