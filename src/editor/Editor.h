/*
 * This file was generated by orbit-idl-2 - DO NOT EDIT!
 */

#ifndef Editor_H
#define Editor_H 1
#include <glib.h>
#define ORBIT_IDL_SERIAL 20
#include <orbit/orbit-types.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/** typedefs **/
#include <bonobo/Bonobo.h>
#if !defined(ORBIT_DECL_GNOME_GtkHTML_Editor_Listener) && !defined(_GNOME_GtkHTML_Editor_Listener_defined)
#define ORBIT_DECL_GNOME_GtkHTML_Editor_Listener 1
#define _GNOME_GtkHTML_Editor_Listener_defined 1
#define GNOME_GtkHTML_Editor_Listener__freekids CORBA_Object__freekids
typedef CORBA_Object GNOME_GtkHTML_Editor_Listener;
extern CORBA_unsigned_long GNOME_GtkHTML_Editor_Listener__classid;
#if !defined(TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_0)
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_0 'E'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_1 'd'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_2 'i'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_3 't'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_4 'o'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Listener_5 'r'
#ifdef ORBIT_IDL_C_IMODULE_Editor
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_GtkHTML_Editor_Listener_struct;
#define TC_GNOME_GtkHTML_Editor_Listener ((CORBA_TypeCode)&TC_GNOME_GtkHTML_Editor_Listener_struct)
#endif
#endif
#if !defined(ORBIT_DECL_GNOME_GtkHTML_Editor_Engine) && !defined(_GNOME_GtkHTML_Editor_Engine_defined)
#define ORBIT_DECL_GNOME_GtkHTML_Editor_Engine 1
#define _GNOME_GtkHTML_Editor_Engine_defined 1
#define GNOME_GtkHTML_Editor_Engine__freekids CORBA_Object__freekids
typedef CORBA_Object GNOME_GtkHTML_Editor_Engine;
extern CORBA_unsigned_long GNOME_GtkHTML_Editor_Engine__classid;
#if !defined(TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_0)
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_0 'E'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_1 'd'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_2 'i'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_3 't'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_4 'o'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_Engine_5 'r'
#ifdef ORBIT_IDL_C_IMODULE_Editor
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_GtkHTML_Editor_Engine_struct;
#define TC_GNOME_GtkHTML_Editor_Engine ((CORBA_TypeCode)&TC_GNOME_GtkHTML_Editor_Engine_struct)
#endif
#endif
#if !defined(_GNOME_GtkHTML_Editor_URLRequestEvent_defined)
#define _GNOME_GtkHTML_Editor_URLRequestEvent_defined 1
typedef struct GNOME_GtkHTML_Editor_URLRequestEvent_type GNOME_GtkHTML_Editor_URLRequestEvent;
struct GNOME_GtkHTML_Editor_URLRequestEvent_type {
CORBA_string url;
Bonobo_Stream stream;
};

#if !defined(TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_0)
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_0 'E'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_1 'd'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_2 'i'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_3 't'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_4 'o'
#define TC_IMPL_TC_GNOME_GtkHTML_Editor_URLRequestEvent_5 'r'
#ifdef ORBIT_IDL_C_IMODULE_Editor
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_GNOME_GtkHTML_Editor_URLRequestEvent_struct;
#define TC_GNOME_GtkHTML_Editor_URLRequestEvent ((CORBA_TypeCode)&TC_GNOME_GtkHTML_Editor_URLRequestEvent_struct)
#endif
#define GNOME_GtkHTML_Editor_URLRequestEvent__alloc() ((GNOME_GtkHTML_Editor_URLRequestEvent *)ORBit_small_alloc (TC_GNOME_GtkHTML_Editor_URLRequestEvent))
#define GNOME_GtkHTML_Editor_URLRequestEvent__freekids(m,d) ORBit_small_freekids (TC_GNOME_GtkHTML_Editor_URLRequestEvent,(m),(d))
#endif

/** POA structures **/
#ifndef _defined_POA_GNOME_GtkHTML_Editor_Listener
#define _defined_POA_GNOME_GtkHTML_Editor_Listener 1
typedef struct {
  void *_private;
CORBA_any* (*event)(PortableServer_Servant _servant, const CORBA_char * name, const CORBA_any* arg, CORBA_Environment *ev);
} POA_GNOME_GtkHTML_Editor_Listener__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
  POA_GNOME_GtkHTML_Editor_Listener__epv *GNOME_GtkHTML_Editor_Listener_epv;
} POA_GNOME_GtkHTML_Editor_Listener__vepv;
typedef struct {
  void *_private;
  POA_GNOME_GtkHTML_Editor_Listener__vepv *vepv;
} POA_GNOME_GtkHTML_Editor_Listener;
extern void POA_GNOME_GtkHTML_Editor_Listener__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_GNOME_GtkHTML_Editor_Listener__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_GNOME_GtkHTML_Editor_Listener */
#ifndef _defined_POA_GNOME_GtkHTML_Editor_Engine
#define _defined_POA_GNOME_GtkHTML_Editor_Engine 1
typedef struct {
  void *_private;
GNOME_GtkHTML_Editor_Listener (*_get_listener)(PortableServer_Servant _servant, CORBA_Environment *ev);
void (*_set_listener)(PortableServer_Servant _servant, const GNOME_GtkHTML_Editor_Listener value, CORBA_Environment *ev);
CORBA_boolean (*runCommand)(PortableServer_Servant _servant, const CORBA_char * command, CORBA_Environment *ev);
CORBA_string (*getParagraphData)(PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment *ev);
void (*setParagraphData)(PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * value, CORBA_Environment *ev);
void (*setObjectDataByType)(PortableServer_Servant _servant, const CORBA_char * type_name, const CORBA_char * key, const CORBA_char * data, CORBA_Environment *ev);
CORBA_boolean (*searchByData)(PortableServer_Servant _servant, const CORBA_long level, const CORBA_char * klass, const CORBA_char * key, const CORBA_char * value, CORBA_Environment *ev);
CORBA_boolean (*isParagraphEmpty)(PortableServer_Servant _servant, CORBA_Environment *ev);
CORBA_boolean (*isPreviousParagraphEmpty)(PortableServer_Servant _servant, CORBA_Environment *ev);
void (*insertHTML)(PortableServer_Servant _servant, const CORBA_char * html, CORBA_Environment *ev);
void (*freeze)(PortableServer_Servant _servant, CORBA_Environment *ev);
void (*thaw)(PortableServer_Servant _servant, CORBA_Environment *ev);
void (*undoBegin)(PortableServer_Servant _servant, const CORBA_char * undo_name, const CORBA_char * redo_name, CORBA_Environment *ev);
void (*undoEnd)(PortableServer_Servant _servant, CORBA_Environment *ev);
void (*ignoreWord)(PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment *ev);
void (*dropUndo)(PortableServer_Servant _servant, CORBA_Environment *ev);
CORBA_boolean (*hasUndo)(PortableServer_Servant _servant, CORBA_Environment *ev);
} POA_GNOME_GtkHTML_Editor_Engine__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_Bonobo_Unknown__epv *Bonobo_Unknown_epv;
  POA_GNOME_GtkHTML_Editor_Engine__epv *GNOME_GtkHTML_Editor_Engine_epv;
} POA_GNOME_GtkHTML_Editor_Engine__vepv;
typedef struct {
  void *_private;
  POA_GNOME_GtkHTML_Editor_Engine__vepv *vepv;
} POA_GNOME_GtkHTML_Editor_Engine;
extern void POA_GNOME_GtkHTML_Editor_Engine__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_GNOME_GtkHTML_Editor_Engine__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_GNOME_GtkHTML_Editor_Engine */

/** skel prototypes **/
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Listener_event(POA_GNOME_GtkHTML_Editor_Listener *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_any* (*_impl_event)(PortableServer_Servant _servant, const CORBA_char * name, const CORBA_any* arg, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine__get_listener(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, GNOME_GtkHTML_Editor_Listener (*_impl__get_listener)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine__set_listener(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl__set_listener)(PortableServer_Servant _servant, const GNOME_GtkHTML_Editor_Listener value, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_runCommand(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_boolean (*_impl_runCommand)(PortableServer_Servant _servant, const CORBA_char * command, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_getParagraphData(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_string (*_impl_getParagraphData)(PortableServer_Servant _servant, const CORBA_char * key, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_setParagraphData(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_setParagraphData)(PortableServer_Servant _servant, const CORBA_char * key, const CORBA_char * value, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_setObjectDataByType(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_setObjectDataByType)(PortableServer_Servant _servant, const CORBA_char * type_name, const CORBA_char * key, const CORBA_char * data, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_searchByData(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_boolean (*_impl_searchByData)(PortableServer_Servant _servant, const CORBA_long level, const CORBA_char * klass, const CORBA_char * key, const CORBA_char * value, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_isParagraphEmpty(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_boolean (*_impl_isParagraphEmpty)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_isPreviousParagraphEmpty(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_boolean (*_impl_isPreviousParagraphEmpty)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_insertHTML(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_insertHTML)(PortableServer_Servant _servant, const CORBA_char * html, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_freeze(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_freeze)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_thaw(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_thaw)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_undoBegin(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_undoBegin)(PortableServer_Servant _servant, const CORBA_char * undo_name, const CORBA_char * redo_name, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_undoEnd(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_undoEnd)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_ignoreWord(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_ignoreWord)(PortableServer_Servant _servant, const CORBA_char * word, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_dropUndo(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_dropUndo)(PortableServer_Servant _servant, CORBA_Environment *ev));
void _ORBIT_skel_small_GNOME_GtkHTML_Editor_Engine_hasUndo(POA_GNOME_GtkHTML_Editor_Engine *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, CORBA_boolean (*_impl_hasUndo)(PortableServer_Servant _servant, CORBA_Environment *ev));

/** stub prototypes **/
#define GNOME_GtkHTML_Editor_Listener_ref Bonobo_Unknown_ref
#define GNOME_GtkHTML_Editor_Listener_unref Bonobo_Unknown_unref
#define GNOME_GtkHTML_Editor_Listener_queryInterface Bonobo_Unknown_queryInterface
CORBA_any* GNOME_GtkHTML_Editor_Listener_event(GNOME_GtkHTML_Editor_Listener _obj, const CORBA_char * name, const CORBA_any* arg, CORBA_Environment *ev);
#define GNOME_GtkHTML_Editor_Engine_ref Bonobo_Unknown_ref
#define GNOME_GtkHTML_Editor_Engine_unref Bonobo_Unknown_unref
#define GNOME_GtkHTML_Editor_Engine_queryInterface Bonobo_Unknown_queryInterface
GNOME_GtkHTML_Editor_Listener GNOME_GtkHTML_Editor_Engine__get_listener(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment *ev);
void GNOME_GtkHTML_Editor_Engine__set_listener(GNOME_GtkHTML_Editor_Engine _obj, const GNOME_GtkHTML_Editor_Listener value, CORBA_Environment *ev);
CORBA_boolean GNOME_GtkHTML_Editor_Engine_runCommand(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * command, CORBA_Environment *ev);
CORBA_string GNOME_GtkHTML_Editor_Engine_getParagraphData(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * key, CORBA_Environment *ev);
void GNOME_GtkHTML_Editor_Engine_setParagraphData(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * key, const CORBA_char * value, CORBA_Environment *ev);
void GNOME_GtkHTML_Editor_Engine_setObjectDataByType(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * type_name, const CORBA_char * key, const CORBA_char * data, CORBA_Environment *ev);
CORBA_boolean GNOME_GtkHTML_Editor_Engine_searchByData(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_long level, const CORBA_char * klass, const CORBA_char * key, const CORBA_char * value, CORBA_Environment *ev);
CORBA_boolean GNOME_GtkHTML_Editor_Engine_isParagraphEmpty(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment *ev);
CORBA_boolean GNOME_GtkHTML_Editor_Engine_isPreviousParagraphEmpty(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment *ev);
void GNOME_GtkHTML_Editor_Engine_insertHTML(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * html, CORBA_Environment *ev);
void GNOME_GtkHTML_Editor_Engine_freeze(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment *ev);
void GNOME_GtkHTML_Editor_Engine_thaw(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment *ev);
void GNOME_GtkHTML_Editor_Engine_undoBegin(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * undo_name, const CORBA_char * redo_name, CORBA_Environment *ev);
void GNOME_GtkHTML_Editor_Engine_undoEnd(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment *ev);
void GNOME_GtkHTML_Editor_Engine_ignoreWord(GNOME_GtkHTML_Editor_Engine _obj, const CORBA_char * word, CORBA_Environment *ev);
void GNOME_GtkHTML_Editor_Engine_dropUndo(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment *ev);
CORBA_boolean GNOME_GtkHTML_Editor_Engine_hasUndo(GNOME_GtkHTML_Editor_Engine _obj, CORBA_Environment *ev);
#include <orbit/orb-core/orbit-interface.h>

#ifdef ORBIT_IDL_C_IMODULE_Editor
static 
#else
extern 
#endif
ORBit_IInterface GNOME_GtkHTML_Editor_Listener__iinterface;
#define GNOME_GtkHTML_Editor_Listener_IMETHODS_LEN 1
#ifdef ORBIT_IDL_C_IMODULE_Editor
static 
#else
extern 
#endif
ORBit_IMethod GNOME_GtkHTML_Editor_Listener__imethods[GNOME_GtkHTML_Editor_Listener_IMETHODS_LEN];
#ifdef ORBIT_IDL_C_IMODULE_Editor
static 
#else
extern 
#endif
ORBit_IInterface GNOME_GtkHTML_Editor_Engine__iinterface;
#define GNOME_GtkHTML_Editor_Engine_IMETHODS_LEN 17
#ifdef ORBIT_IDL_C_IMODULE_Editor
static 
#else
extern 
#endif
ORBit_IMethod GNOME_GtkHTML_Editor_Engine__imethods[GNOME_GtkHTML_Editor_Engine_IMETHODS_LEN];

/** IMethods index */

#ifndef __GNOME_GtkHTML_Editor_Listener__imethods_index
#define __GNOME_GtkHTML_Editor_Listener__imethods_index
typedef enum {
	GNOME_GtkHTML_Editor_Listener_event__imethods_index
} GNOME_GtkHTML_Editor_Listener__imethods_index;
#endif /* __GNOME_GtkHTML_Editor_Listener__imethods_index */

#ifndef __GNOME_GtkHTML_Editor_Engine__imethods_index
#define __GNOME_GtkHTML_Editor_Engine__imethods_index
typedef enum {
	GNOME_GtkHTML_Editor_Engine__get_listener__imethods_index,
	GNOME_GtkHTML_Editor_Engine__set_listener__imethods_index,
	GNOME_GtkHTML_Editor_Engine_runCommand__imethods_index,
	GNOME_GtkHTML_Editor_Engine_getParagraphData__imethods_index,
	GNOME_GtkHTML_Editor_Engine_setParagraphData__imethods_index,
	GNOME_GtkHTML_Editor_Engine_setObjectDataByType__imethods_index,
	GNOME_GtkHTML_Editor_Engine_searchByData__imethods_index,
	GNOME_GtkHTML_Editor_Engine_isParagraphEmpty__imethods_index,
	GNOME_GtkHTML_Editor_Engine_isPreviousParagraphEmpty__imethods_index,
	GNOME_GtkHTML_Editor_Engine_insertHTML__imethods_index,
	GNOME_GtkHTML_Editor_Engine_freeze__imethods_index,
	GNOME_GtkHTML_Editor_Engine_thaw__imethods_index,
	GNOME_GtkHTML_Editor_Engine_undoBegin__imethods_index,
	GNOME_GtkHTML_Editor_Engine_undoEnd__imethods_index,
	GNOME_GtkHTML_Editor_Engine_ignoreWord__imethods_index,
	GNOME_GtkHTML_Editor_Engine_dropUndo__imethods_index,
	GNOME_GtkHTML_Editor_Engine_hasUndo__imethods_index
} GNOME_GtkHTML_Editor_Engine__imethods_index;
#endif /* __GNOME_GtkHTML_Editor_Engine__imethods_index */

#ifndef __ORBIT_IMETHODS_INDEX
#define __ORBIT_IMETHODS_INDEX
#define ORBIT_IMETHODS_INDEX(m) (m ## __imethods_index)
#endif /* __ORBIT_IMETHODS_INDEX */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#ifndef EXCLUDE_ORBIT_H
#include <orbit/orbit.h>

#endif /* EXCLUDE_ORBIT_H */
#endif
#undef ORBIT_IDL_SERIAL
